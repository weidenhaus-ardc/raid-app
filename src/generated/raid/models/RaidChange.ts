/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RaidChange
 */
export interface RaidChange {
    /**
     * 
     * @type {string}
     * @memberof RaidChange
     */
    handle?: string;
    /**
     * 
     * @type {number}
     * @memberof RaidChange
     */
    version?: number;
    /**
     * A base64 encoded json patch (RFC 6902) representation of a change to the raid.
     * @type {string}
     * @memberof RaidChange
     */
    diff?: string;
    /**
     * A timestamp of the change
     * @type {Date}
     * @memberof RaidChange
     */
    timestamp?: Date;
}

/**
 * Check if a given object implements the RaidChange interface.
 */
export function instanceOfRaidChange(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RaidChangeFromJSON(json: any): RaidChange {
    return RaidChangeFromJSONTyped(json, false);
}

export function RaidChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): RaidChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'handle': !exists(json, 'handle') ? undefined : json['handle'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'diff': !exists(json, 'diff') ? undefined : json['diff'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
    };
}

export function RaidChangeToJSON(value?: RaidChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'handle': value.handle,
        'version': value.version,
        'diff': value.diff,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * RAID v2 API
 * This file is where all the endpoint paths are defined, it\'s the \"top level\' of the OpenAPI definition that links all the different files together. The `3.0` in the filename refers to this file being based on OpenAPI 3.0  as opposed to OpenAPI 3.1, which the tooling doesn\'t support yet. The `2.0.0` in the version field refers to the fact that there\'s already  a `1.0.0` used for the legacy RAiD application. Note that swagger ui doesn\'t currently work with our spec,  see https://github.com/swagger-api/swagger-ui/issues/7724 But the spec works fine with openapi-generator tooling. 
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: contact@raid.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ValidationFailure } from './ValidationFailure';
import {
    ValidationFailureFromJSON,
    ValidationFailureFromJSONTyped,
    ValidationFailureToJSON,
} from './ValidationFailure';

/**
 * 
 * @export
 * @interface ValidationFailureResponse
 */
export interface ValidationFailureResponse {
    /**
     * 
     * @type {Array<ValidationFailure>}
     * @memberof ValidationFailureResponse
     */
    failures: Array<ValidationFailure>;
    /**
     * 
     * @type {string}
     * @memberof ValidationFailureResponse
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationFailureResponse
     */
    title: string;
    /**
     * 
     * @type {number}
     * @memberof ValidationFailureResponse
     */
    status: number;
    /**
     * 
     * @type {string}
     * @memberof ValidationFailureResponse
     */
    detail: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationFailureResponse
     */
    instance: string;
}

/**
 * Check if a given object implements the ValidationFailureResponse interface.
 */
export function instanceOfValidationFailureResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "failures" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "detail" in value;
    isInstance = isInstance && "instance" in value;

    return isInstance;
}

export function ValidationFailureResponseFromJSON(json: any): ValidationFailureResponse {
    return ValidationFailureResponseFromJSONTyped(json, false);
}

export function ValidationFailureResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationFailureResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'failures': ((json['failures'] as Array<any>).map(ValidationFailureFromJSON)),
        'type': json['type'],
        'title': json['title'],
        'status': json['status'],
        'detail': json['detail'],
        'instance': json['instance'],
    };
}

export function ValidationFailureResponseToJSON(value?: ValidationFailureResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'failures': ((value.failures as Array<any>).map(ValidationFailureToJSON)),
        'type': value.type,
        'title': value.title,
        'status': value.status,
        'detail': value.detail,
        'instance': value.instance,
    };
}

